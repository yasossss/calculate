// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.1
// source: data.proto

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConnectClient is the client API for Connect service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnectClient interface {
	// 该服务包含一个 SayHello 方法 HelloRequest、HelloReply分别为该方法的输入与输出
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	// getResults 得到 发送的多组数的最大值最小值和平均值
	// rpc getResults(stream GrpcRequest) returns (stream Response);
	GetResults(ctx context.Context, opts ...grpc.CallOption) (Connect_GetResultsClient, error)
}

type connectClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectClient(cc grpc.ClientConnInterface) ConnectClient {
	return &connectClient{cc}
}

func (c *connectClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/protocol.Connect/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectClient) GetResults(ctx context.Context, opts ...grpc.CallOption) (Connect_GetResultsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Connect_ServiceDesc.Streams[0], "/protocol.Connect/getResults", opts...)
	if err != nil {
		return nil, err
	}
	x := &connectGetResultsClient{stream}
	return x, nil
}

type Connect_GetResultsClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type connectGetResultsClient struct {
	grpc.ClientStream
}

func (x *connectGetResultsClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *connectGetResultsClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConnectServer is the server API for Connect service.
// All implementations must embed UnimplementedConnectServer
// for forward compatibility
type ConnectServer interface {
	// 该服务包含一个 SayHello 方法 HelloRequest、HelloReply分别为该方法的输入与输出
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	// getResults 得到 发送的多组数的最大值最小值和平均值
	// rpc getResults(stream GrpcRequest) returns (stream Response);
	GetResults(Connect_GetResultsServer) error
	mustEmbedUnimplementedConnectServer()
}

// UnimplementedConnectServer must be embedded to have forward compatible implementations.
type UnimplementedConnectServer struct {
}

func (UnimplementedConnectServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedConnectServer) GetResults(Connect_GetResultsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetResults not implemented")
}
func (UnimplementedConnectServer) mustEmbedUnimplementedConnectServer() {}

// UnsafeConnectServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectServer will
// result in compilation errors.
type UnsafeConnectServer interface {
	mustEmbedUnimplementedConnectServer()
}

func RegisterConnectServer(s grpc.ServiceRegistrar, srv ConnectServer) {
	s.RegisterService(&Connect_ServiceDesc, srv)
}

func _Connect_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Connect/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Connect_GetResults_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConnectServer).GetResults(&connectGetResultsServer{stream})
}

type Connect_GetResultsServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type connectGetResultsServer struct {
	grpc.ServerStream
}

func (x *connectGetResultsServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *connectGetResultsServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Connect_ServiceDesc is the grpc.ServiceDesc for Connect service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Connect_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.Connect",
	HandlerType: (*ConnectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Connect_SayHello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getResults",
			Handler:       _Connect_GetResults_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "data.proto",
}
